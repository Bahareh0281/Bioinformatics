# -*- coding: utf-8 -*-
"""Machine Learning_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fQvsfJkHMD6R6qsZO0tS8kkobQYOcA3Q
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score

# Load the datasets
case_data = pd.read_csv('PC_case.csv')
control_data = pd.read_csv('PC_control.csv')
gene_data = pd.read_csv('geneList.csv')

# Rename columns for clarity
case_data.columns = ['Chromosome', 'Start', 'End', 'Type', 'Patient_ID']
control_data.columns = ['Chromosome', 'Start', 'End', 'Type', 'Patient_ID']
gene_data.columns = ['Gene_ID', 'Unused', 'Chromosome', 'Gene_Start', 'Gene_End']

# Drop unused column in gene_list
gene_list = gene_data.drop(columns=['Unused'])

# Add a label column to distinguish between cases and controls
case_data['Label'] = 1
control_data['Label'] = 0

# Combine the datasets
data = pd.concat([case_data, control_data], ignore_index=True)

# Feature engineering: Extract key features
data['Length'] = data['End'] - data['Start']  # Length of the CNV

# Encode categorical variables (e.g., Type)
data = pd.get_dummies(data, columns=['Type'], drop_first=True)

# Convert non-numeric columns to numeric values
# Chromosome should be treated as categorical
data['Chromosome'] = data['Chromosome'].astype(str)  # Ensure Chromosome is a string
data['Chromosome'] = pd.factorize(data['Chromosome'])[0]  # Encode as numeric

# Re-select features and target after encoding
X = data[['Chromosome', 'Start', 'End', 'Length'] + [col for col in data.columns if 'Type' in col]]
y = data['Label']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest Classifier
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))