# -*- coding: utf-8 -*-
"""Statistics_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fQvsfJkHMD6R6qsZO0tS8kkobQYOcA3Q
"""

import pandas as pd
from scipy.stats import fisher_exact

# Load the data
case_data = pd.read_csv('PC_case.csv')
control_data = pd.read_csv('PC_control.csv')
gene_list = pd.read_csv('geneList.csv')

# Display data structure for understanding
case_data.head(), control_data.head(), gene_list.head()

# Rename columns for clarity
case_data.columns = ['Chromosome', 'Start', 'End', 'Type', 'Patient_ID']
control_data.columns = ['Chromosome', 'Start', 'End', 'Type', 'Patient_ID']
gene_list.columns = ['Gene_ID', 'Unused', 'Chromosome', 'Gene_Start', 'Gene_End']

# Drop unused column in gene_list
gene_list = gene_list.drop(columns=['Unused'])

# Display updated structures for validation
case_data.head(), control_data.head(), gene_list.head()

# Group data by Chromosome and Region for case and control
case_regions = case_data.groupby(['Chromosome', 'Start', 'End', 'Type']).size().reset_index(name='Case_Count')
control_regions = control_data.groupby(['Chromosome', 'Start', 'End', 'Type']).size().reset_index(name='Control_Count')

# Merge the case and control data on Chromosome, Start, End, and Type
merged_regions = pd.merge(case_regions, control_regions,
                          on=['Chromosome', 'Start', 'End', 'Type'],
                          how='outer').fillna(0)

# Statistical test to identify significant regions
def fisher_test(row):
    # Contingency table: [[case presence, control presence], [case absence, control absence]]
    case_presence = row['Case_Count']
    control_presence = row['Control_Count']
    total_case = case_data['Patient_ID'].nunique()
    total_control = control_data['Patient_ID'].nunique()
    case_absence = total_case - case_presence
    control_absence = total_control - control_presence
    contingency_table = [[case_presence, control_presence], [case_absence, control_absence]]
    _, p_value = fisher_exact(contingency_table, alternative='greater')
    return p_value

# Apply Fisher's exact test to each row
merged_regions['P_Value'] = merged_regions.apply(fisher_test, axis=1)

# Filter significant regions (p-value < 0.05)
significant_regions = merged_regions[merged_regions['P_Value'] < 0.05]

# tools.display_dataframe_to_user(name="Significant Chromosomal Regions", dataframe=significant_regions)

# import ace_tools as tools

# # Re-display significant regions after optimization
# tools.display_dataframe_to_user(name="Optimized Significant Chromosomal Regions", dataframe=significant_regions)

# Map significant regions to genes
def map_to_genes(region, genes):
    region_chrom = str(region['Chromosome'])
    region_start = region['Start']
    region_end = region['End']
    overlapping_genes = genes[
        (genes['Chromosome'] == f'chr{region_chrom}') &
        (genes['Gene_End'] >= region_start) &
        (genes['Gene_Start'] <= region_end)
    ]
    return ";".join(overlapping_genes['Gene_ID'])

# Apply mapping to each significant region
significant_regions['Associated_Genes'] = significant_regions.apply(
    lambda row: map_to_genes(row, gene_list), axis=1
)

# tools.display_dataframe_to_user(name="Significant Regions with Associated Genes", dataframe=significant_regions)

import pandas as pd
from scipy.stats import fisher_exact

# Load the data
case_data = pd.read_csv('PC_case.csv')
control_data = pd.read_csv('PC_control.csv')
gene_list = pd.read_csv('geneList.csv')

# Rename columns for clarity
case_data.columns = ['Chromosome', 'Start', 'End', 'Type', 'Patient_ID']
control_data.columns = ['Chromosome', 'Start', 'End', 'Type', 'Patient_ID']
gene_list.columns = ['Gene_ID', 'Unused', 'Chromosome', 'Gene_Start', 'Gene_End']

# Drop unused column in gene_list
gene_list = gene_list.drop(columns=['Unused'])

# Group case and control data by chromosomal regions
case_regions = case_data.groupby(['Chromosome', 'Start', 'End', 'Type']).size().reset_index(name='Case_Count')
control_regions = control_data.groupby(['Chromosome', 'Start', 'End', 'Type']).size().reset_index(name='Control_Count')

# Merge case and control regions
merged_regions = pd.merge(case_regions, control_regions, on=['Chromosome', 'Start', 'End', 'Type'], how='outer').fillna(0)
merged_regions['Case_Count'] = merged_regions['Case_Count'].astype(int)
merged_regions['Control_Count'] = merged_regions['Control_Count'].astype(int)

# Calculate total case and control patient counts
total_case_patients = case_data['Patient_ID'].nunique()
total_control_patients = control_data['Patient_ID'].nunique()

# Perform Fisher's exact test
def fast_fisher(row, total_case, total_control):
    case_presence = row['Case_Count']
    control_presence = row['Control_Count']
    case_absence = total_case - case_presence
    control_absence = total_control - control_presence
    contingency = [[case_presence, control_presence], [case_absence, control_absence]]
    _, p_val = fisher_exact(contingency, alternative='greater')
    return p_val

merged_regions['P_Value'] = merged_regions.apply(
    lambda row: fast_fisher(row, total_case_patients, total_control_patients), axis=1
)

# Filter significant regions
significant_regions = merged_regions[merged_regions['P_Value'] < 0.05]

# Map significant regions to genes
def map_to_genes(region, genes):
    region_chrom = str(region['Chromosome'])
    region_start = region['Start']
    region_end = region['End']
    overlapping_genes = genes[
        (genes['Chromosome'] == f'chr{region_chrom}') &
        (genes['Gene_End'] >= region_start) &
        (genes['Gene_Start'] <= region_end)
    ]
    return ";".join(overlapping_genes['Gene_ID'])

significant_regions['Associated_Genes'] = significant_regions.apply(
    lambda row: map_to_genes(row, gene_list), axis=1
)

# Save results to a CSV file
significant_regions.to_csv('Significant_Regions_with_Genes.csv', index=False)

print("Significant regions with associated genes saved to 'Significant_Regions_with_Genes.csv'.")

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Ensure chromosome and positions are sorted for better visualization
significant_regions['Chromosome'] = significant_regions['Chromosome'].astype(str)
significant_regions_with_genes = significant_regions.sort_values(by=['Chromosome', 'Start'])

# Bar Plot: Case vs Control Counts
plt.figure(figsize=(12, 6))
sns.barplot(
    x='Chromosome',
    y='Case_Count',
    data=significant_regions_with_genes,
    color='blue',
    label='Case'
)
sns.barplot(
    x='Chromosome',
    y='Control_Count',
    data=significant_regions_with_genes,
    color='orange',
    label='Control'
)
plt.title('Case vs Control Counts by Chromosome', fontsize=14)
plt.ylabel('Counts', fontsize=12)
plt.xlabel('Chromosome', fontsize=12)
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Scatter Plot: Chromosome Position vs P-Value
plt.figure(figsize=(12, 6))
sns.scatterplot(
    x='Start',
    y=-np.log10(significant_regions_with_genes['P_Value']),
    hue='Chromosome',
    palette='tab10',
    data=significant_regions_with_genes
)
plt.title('-Log10 P-Value by Chromosome Position', fontsize=14)
plt.xlabel('Chromosome Position (Start)', fontsize=12)
plt.ylabel('-Log10(P-Value)', fontsize=12)
plt.axhline(-np.log10(0.05), color='red', linestyle='--', label='Significance Threshold')
plt.legend(title='Chromosome')
plt.tight_layout()
plt.show()